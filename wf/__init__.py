"""
Accurately assemble sequence using DNA reads generated by Oxford Nanopore flow cells as input.
"""
from flytekit.core.with_metadata import FlyteMetadata
from latch.types import LatchDir, LatchFile
from latch import workflow, large_gpu_task
from typing import Annotated
from pathlib import Path
import subprocess


@large_gpu_task
def batch_assembly_task(
    input_dir: LatchDir,
    config: LatchFile,
) -> (LatchFile, LatchDir):
    """
    Run shasta on the input directory.
    """

    log_file = Path(f"/root/shasta_log.txt")
    output_dir = Path(f"/root/ShastaRun/")

    allowed_files = ['.fasta', '.fa', '.fastq', '.fq', '.FASTA', '.FA', '.FASTQ', '.FQ']
    input_files = [f for f in Path(input_dir).iterdir() if f.suffix in allowed_files]
    file_paths_as_string = [f.as_posix() for f in input_files]

    if Path(config).suffix == '.conf':
        _assembly_cmd = [
            "./shasta", 
            "--input", 
            str(" ".join(file_paths_as_string)),
            "--config", 
            str(Path(config).resolve()),
            "--assemblyDirectory",
            str(output_dir),
        ]

        with open(log_file, "w") as f:
            subprocess.run(_assembly_cmd, stdout=f, stderr=f)

        return (
            LatchFile(str(log_file), f"latch://{log_file}"),
            LatchDir(str(output_dir), f"latch://{output_dir}"),
        )
    else:
        raise ValueError(f"{config} is not a valid config file.")


@workflow
def shasta(
    input_dir: LatchDir,
    config: Annotated[
            LatchFile,
            FlyteMetadata(
                {
                    "rules": [
                        {
                            "regex": "(.conf)$",
                            "message": "Only .conf extensions are valid",
                        }
                    ]
                }
            ),
        ],
) -> (LatchFile, LatchDir):
    
    """De novo assembly from Oxford Nanopore reads

    Shasta
    ___
    The goal of Shasta is to rapidly produce accurate assembled sequence using as input DNA reads generated by [Oxford Nanopore](https://nanoporetech.com) flow cells.

    ## Quickstart

    1. Download test input (`fasta`) and configuration (`conf`) files from [here](https://mega.nz/folder/R1BmiJJI#YFdxk95m13tZJt-6YLDZMA)
    2. Create an input directory on [dashboard](https://console.latch.bio/data) and upload your data
    3. Add `wf.shasta` to your workspace from [explore](https://console.latch.bio/explore)
    4. Go to your [workflows](https://console.latch.bio/workflows) and open `wf.shasta` tool
    5. Provide the input directory where `fasta` file is uploaded and also select the `conf` file
    6. Launch the workflow

    ## Links
    - Configuration Presets: https://github.com/chanzuckerberg/shasta/tree/master/conf
    - Source Code: https://github.com/chanzuckerberg/shasta
    - Documentation: https://chanzuckerberg.github.io/shasta
    - Workflow Code: https://github.com/nahid18/shasta

    ## How to cite
    - Paper: https://www.nature.com/articles/s41587-020-0503-6
    - Acknowledgements to external packages: https://chanzuckerberg.github.io/shasta/Acknowledgments.html
    ___



    __metadata__:
        display_name: Shasta
        author:
            name: Chan Zuckerberg Initiative
            email: security@chanzuckerberg.com
            github: https://github.com/chanzuckerberg/shasta
        repository:
        license:
            id: MIT

    Args:

        input_dir:
          Input directory containing FASTA/FASTQ files to be assembled

          __metadata__:
            display_name: Input Directory

        config:
          Configuration file to use for assembly

          __metadata__:
            display_name: Configuration File
    """
    
    return batch_assembly_task(
        input_dir=input_dir,
        config=config,
    )
